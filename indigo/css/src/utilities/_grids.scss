/*******************************************************************************
  Grid and Layout
*******************************************************************************/
$col-max: 20rem; // 20 * 16 = 320px
$col-min: 34rem; // 34 * 16 = 544px

.grid12 {
  display: grid;
  grid-template-columns: repeat(12, [col-start] 1fr);
  grid-auto-rows: auto;
}

.grid8 {
  display: grid;
  grid-template-columns: repeat(8, [col-start] 1fr);
  grid-auto-rows: auto;
}

$cols: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
$rows: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);

.full {
  grid-area: auto / 1 / auto / 13;
}

.half-1 {
  grid-area: auto / 1 / auto / 7;
}

.half-2 {
  grid-area: auto / 7 / auto / 13;
}

.third-1 {
  grid-area: auto / 1 / auto / 4;
}

.third-2 {
  grid-area: auto / 4 / auto / 8;
}

.third-3 {
  grid-area: auto / 8 / auto / 13;
}

.fourth-1 {
  grid-area: auto / 1 / auto / 4;
}

.fourth-2 {
  grid-area: auto / 4 / auto / 7;
}

.fourth-3 {
  grid-area: auto / 7 / auto / 10;
}

.fourth-4 {
  grid-area: auto / 10 / auto / 13;
}

@each $bp in $breakpoints {
  $suffix: get($bp, "suffix");
  $rule: get($bp, "rule");

  @media #{$rule} {
    .full-#{$suffix} {
      grid-area: auto / 1 / auto / 13;
    }

    .half-1-#{$suffix} {
      grid-area: auto / 1 / auto / 7;
    }

    .half-2-#{$suffix} {
      grid-area: auto / 7 / auto / 13;
    }

    .third-1-#{$suffix} {
      grid-area: auto / 1 / auto / 4;
    }

    .third-2-#{$suffix} {
      grid-area: auto / 4 / auto / 8;
    }

    .third-3-#{$suffix} {
      grid-area: auto / 8 / auto / 13;
    }

    .fourth-1-#{$suffix} {
      grid-area: auto / 1 / auto / 4;
    }

    .fourth-2-#{$suffix} {
      grid-area: auto / 4 / auto / 7;
    }

    .fourth-3-#{$suffix} {
      grid-area: auto / 7 / auto / 10;
    }

    .fourth-4-#{$suffix} {
      grid-area: auto / 10 / auto / 13;
    }
  }
}

@each $i, $dim in $scale {
  .gap#{$i} {
    gap: #{$dim};
  }
}

@each $from in $cols {
  @each $to in $cols {
    @if $from < $to {
      .c#{$from}-#{$to} {
        grid-column-start: #{$from};
        grid-column-end: #{$to};
      }
    }
  }
}

// .mw1 {
//   max-width: 640px;
// }
//
// .mw2 {
//   max-width: 800px;
// }
//
// .mw3 {
//   max-width: 1024px;
// }

@each $bp in $breakpoints {
  $suffix: get($bp, "suffix");
  $rule: get($bp, "rule");

  @media #{$rule} {
    @each $from in $cols {
      @each $to in $cols {
        @if $from < $to {
          .c#{$from}-#{$to}-#{$suffix} {
            grid-column-start: #{$from};
            grid-column-end: #{$to};
          }
        }
      }
    }
  }
}

@each $from in $rows {
  @each $to in $rows {
    @if $from < $to {
      .r#{$from}-#{$to} {
        grid-row-start: #{$from};
        grid-row-end: #{$to};
      }
    }
  }
}

//
//
// .grid-2 {
//   display: grid;
//   grid-template-columns: repeat(2, [col-start] minmax($col-min, $col-max));
//   // grid-template-rows:repeat(1, [col-start] 1fr);
//   grid-gap: 16px;
// }
//
// .grid-4 {
//   display: grid;
//   grid-template-columns: repeat(4, [col-start] minmax($col-min, $col-max));
//   // grid-template-rows: repeat(1, [col-start] 1fr);
//   grid-gap: 16px;
// }
//
// .grid-6 {
//   display: grid;
//   grid-template-columns: repeat(6, [col-start] 1fr);
//   // grid-template-rows: repeat(1, [col-start] 1fr);
//   grid-gap: 16px;
// }
//
// .grid-8 {
//   display: grid;
//   grid-template-columns: repeat(8, [col-start] 1fr);
//   // grid-template-rows: repeat(1, [col-start] 1fr);
//   grid-gap: 16px;
// }
//
// .grid-12 {
//   display: grid;
//   grid-template-columns: repeat(12, [col-start] 1fr);
//   // grid-template-rows: repeat(1, [col-start] 1fr);
//   grid-gap: 16px;
// }
//
// .grid-6x1 {
//   display: grid;
//   grid-template-columns: repeat(6, [col-start] minmax($col-min, $col-max));
//   // grid-template-rows: repeat(1, [col-start] 1fr);
//   grid-gap: 16px;
// }
//
// .grid-3x2 {
//   display: grid;
//   grid-template-columns: repeat(3, [col-start] minmax($col-min, $col-max));
//   // grid-template-rows: repeat(2, [row-start] 1fr);
//   grid-gap: 16px;
// }
//
// .grid-2x3 {
//   display: grid;
//   grid-template-columns: repeat(2, [col-start] minmax($col-min, $col-max));
//   // grid-template-rows: repeat(3, [row-start] 1fr);
//   grid-gap: 16px;
// }
//
// .grid-1x6 {
//   display: grid;
//   grid-template-columns: repeat(1, [col-start] minmax($col-min, $col-max));
//   // grid-template-rows: repeat(6, [row-start] 1fr);
//   grid-gap: 16px;
// }

// @each $bp in $breakpoints {
//   $suffix: get($bp, "suffix");
//   $rule: get($bp, "rule");
//
//   @media #{$rule} {
//     .grid-6x1-#{$suffix} {
//       display: grid;
//       grid-template-columns: repeat(6, [col-start] minmax($col-min, $col-max));
//       grid-template-rows: repeat(1, [col-start] auto);
//       grid-gap: 16px;
//     }
//
//     .grid-3x2-#{$suffix} {
//       display: grid;
//       grid-template-columns: repeat(3, [col-start] minmax($col-min, $col-max));
//       grid-template-rows: repeat(2, [row-start] auto);
//       grid-gap: 16px;
//     }
//
//     .grid-2x3-#{$suffix} {
//       display: grid;
//       grid-template-columns: repeat(2, [col-start] minmax($col-min, $col-max));
//       grid-template-rows: repeat(3, [row-start] auto);
//       grid-gap: 16px;
//     }
//
//     .grid-1x6-#{$suffix} {
//       display: grid;
//       grid-template-columns: repeat(1, [col-start] minmax($col-min, $col-max));
//       grid-template-rows: repeat(6, [row-start] auto);
//       grid-gap: 16px;
//     }
//   }
// }

// Percentage-of-grid-based col widths
// @each $name, $w in $semantic-cols {
//
//   .#{$name} { width: #{$w} };
//
//   @each $breakpoint, $bp-value in $breakpoints {
//     @media only screen and (min-width:$bp-value) {
//       .#{$name}-#{$breakpoint} { width: #{$w} };
//     }
//   };
// };
//
//
//
// // Percentage-of-12 col widths
// @each $name, $w in $percentage-cols {
//
//   .#{$name}-12 { width: #{$w} };
//
//   @each $breakpoint, $bp-value in $breakpoints {
//     @media only screen and (min-width:$bp-value) {
//       .#{$name}-12-#{$breakpoint} { width: #{$w} };
//     }
//   };
// };

// Gutter and Slug spacing
// @each $d in (0, 1, 2, 4, 8, 16) {
//   .slug#{$d} > *:not(:last-child)  { margin-bottom:  #{$d}rem; }
//   .gut#{$d} > *:not(:last-child)   { margin-right:   #{$d}rem; }
//
//   @each $breakpoint, $bp-value in $breakpoints {
//     @media only screen and (min-width:$bp-value) {
//
//       .slug#{$d}-#{$breakpoint} > *:not(:last-child) {
//         margin-bottom: #{$d}rem;
//       }
//
//       .gut#{$d}-#{$breakpoint} > *:not(:last-child) {
//         margin-right: #{$d}rem;
//       }
//
//     }
//   };
// }
